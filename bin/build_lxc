#!/usr/bin/env bash

# This script configures and provisions a named Proxmox LXC by using four files within the
# project hiearchy directiry:
#
#    <name>configSettings  This is a sourced bash syntax file to set various build parameters
#                          and define callback hooks
#    <name>.env            Also used to declare set various build parameters.
#    <name>/bin/build-target.sh  This is called on the tartget once during provisoning.
#    <name>/bin/startup..sh  If this file exists then it is added as a cron root @reboot target
#                          and is called on LXC startup with normal crontab sequence precedence
#
# Files within the project ifile tree are control under git.  Note that the .env files are in
# the .gitignore category are are not published to GitHub.  This are used to maintain secret /
# private data that might compromise security if published publically.
#
# Note that this process is broken into funtion chunks, so variables are only global for a reason.
#
# Also this script is run at normal privilege from a sudo-enabled account.  Privileged functions
# are "sudoed", but this means than any environment must be explicitly passed to them.  This also
# means that it can't use direct piping to root-owned files, to append to them, and so sudo tee
# id used instead.

function setupErrorHandling {
    set -Eeuo pipefail
    trap 'error_handler $LINENO "$BASH_COMMAND"' ERR
    function error_handler {
        local line_no="$1" cmd="$2" status="$?"
        local error_message="✗ error in line $line_no: exit code $status: while executing command $cmd"
        echo -e "\n$error_message\n"
    }
    function msg_info  { echo -e " - $1"; }
    function msg_error { echo -e " ✗ $1"; exit 1; }
    function msg_ok    { echo -e " ✓ $1"; }
}

function setRoot {
    # This script is in the project bin directory, so paths are resolved relative to this
    SCRIPT_PATH="$(dirname $(realpath $0))"
    PROJECT_PATH="$(dirname $SCRIPT_PATH)"
    ROOT_DIR=$1
    ROOT_PATH="$PROJECT_PATH/$ROOT_DIR"
    DATA_PATH=$(realpath $PROJECT_PATH/.data)
    # Error if root path is invalid because it must include all mandatory files.
    [[ -f $ROOT_PATH/.env && -f $ROOT_PATH/configSettings && $ROOT_PATH/target-bootstrap.sh ]] ||
         msg_error "Usage is build-LXR.sh <LXC name> [<options>]"
}

function setOptionDefaults {
    # The build proces uses a number of global parameters. The defaults for these are set here,
    # but note the convention that none include an underscore.  Such bareword parameters can
    # be subsequently overriden by .env, configSettings or a command line option
    
    APP=""
    MAP="1"
    REBUILD=""
    VERBOSE="no"
    TEMPLATESTORE="local"
    DISKSTORE="local-lvm"
    CHECKTEMPLATE=""

    BRIDGE="vmbr0"
    CORES=1
    CTID=""
    DISABLEIP6="1"
    DISK="0.5"
    DNS=$(grep nameserver /etc/resolv.conf | head -1 |awk '{ print $2; }')
    DOMAIN="home"
    FEATURES="nesting=1"
    GATEWAY=""
    HOST=""
    MACADDR=""
    MTU=""
    NET="dhcp"
    ONBOOT=1
    OSTYPE="alpine"
    OSVERSION="3.17"
    PASSWORD="$(head -c 128 /dev/urandom| tr -cd "[:alnum:]%&()*+,-.:<=")"
    PRIVTYPE=1
    RAM=128
    SSHKEYS=$(realpath ~/.ssh/authorized_keys)
    VLAN=""
}

function setEnvOptOverrides {
    # The container's .env and configSettings file can override the above global parameters.  If
    # the OPT_xxxx settings are used, then this function logs  parameters and updated values.
    source $ROOT_PATH/.env
    source $ROOT_PATH/configSettings

    for v in ${!OPT_*}; do
        local -n from=$v to=${v:4}
        [[ -v to ]] || msg_error "Unknown option $v"
        msg_info "${v:4} changed from default ($to) to $from"
        to=$from
    done
}

function setCommandLinevOptOverrides {
    # Command line options (e.g. --ram 256) can override the corresponding setup option
    while (( $# > 0 )) ; do
        local -u name=${1:2}
        local -n var=$name
        local    val="1"
        [[ ${1:0:2} = "--"  && -v var  ]] || msg_error "Unknown option $1"
        shift
        # if the value is omitted then it defaults to 1
        [[ $# -gt 0 && ${1:0:2} != "--" ]] && ( val=$1; shift )
        var=$val
        msg_info "$name changed from $var to $val"
    done
}

function runHhook {
    # the configSettings script can define a number of callback hooks which can be invoked
    # during this build process, E.g. "runHook someHook fred" will run the function
    # HOOK_someHook if it has been defined in configSettings  with the parameter fred.  The
    # bash syntax for manipulating functions by references is arcaine, but it does the job.
    local v=$1; shift;
    (local -F HOOK_$v) 2>&1 >/dev/null && (HOOK_$v $*);
    return 0
}

function fixupVariableDefaults {
    # Some variables need their values fixed up
    [[ $VERBOSE = "1" ]] && VERBOSE="yes"
    [[ $VERBOSE = "yes" ]] && set -x
    [[ -z $CTID ]] && CTID=$(sudo pvesh get /cluster/nextid)
    [[ -z $HOST ]] && HOST=$ROOT_DIR
    [[ $FEATURES =~ keyctl= || $PRIVTYPE = "0" ]]  || FEATURES="${FEATURES},keyctl=1"
}

function map_UID {
    # Most LXCas have one UID:GID mapped to the same UID:GID on the host.
    # This function updates the sud?id and lxc conf files if needed
    local -i ctid=${1:-$CTID} id=${2:-1000} base=${3:-100000}
    local -i idm1 id_1 base_id_1 baseres
    idm1=id-1
    id_1=id+1
    base_id_1=base+id+1
    baseres=0x10000-id-1
    grep -q ":$id:" /etc/subuid  || sudo sed -i "\$aroot:$id:1" /etc/subgid
    grep -q ":$id:" /etc/subgid  || sudo sed -i "\$aroot:$id:1" /etc/subgid
    sudo sed -i -f - /etc/pve/lxc/$CTID.conf <<END
        \$a lxc.idmap = u 0 $base $id
        \$a lxc.idmap = u $id $id 1
        \$a lxc.idmap = u $id_1 $base_id_1 $baseres
        \$a lxc.idmap = g 0 $base $id
        \$a lxc.idmap = g $id $id 1
        \$a lxc.idmap = g $id_1 $base_id_1 $baseres
END
    runHhook mapping
}

function get_template {
    # Lookup the OS template name used for making the LXC.  If the command line
    # options --checktemplate is set, then udpate the refesh the template list
    # and download a new version if one exists.
    local os=$1
    if (( CHECKTEMPLATE==1 )); then
        # Refresh the template list and download new template if nec.
        sudo pveam update >/dev/null

        local template= $(sudo pveam available --section system |
                          awk '{print $2}' |  grep "^$os" | tail -1) ||
            msg_err "Unable to find template for $os"

        sudo pveam list $TEMPLATESTORE | grep -q $template || {
            sudo pveam download $TEMPLATESTORE $template >/dev/null ||
            msg_error "A problem occured while downloading the LXC template."
            }
    else
        # Retrieve the template name from local storage
        local template=$(sudo pveam list  $TEMPLATESTORE |
            awk -F '[/ ]' '{print $2}' |  grep "^$os" | tail -1) ||
                msg_err "Unable to find template for $os"
    fi
    echo "${TEMPLATESTORE}:vztmpl/$template"
}

function add_mp {
    local dir=$(readlink -f $1) tgt=$2 opts=$3
    [[ -d $1 ]] || return 0
    mps="${mps} --mp$((mpi=mpi+1)) ${dir},mp=${tgt},${opts}"
}

function create_LXC {
    local -i ctid=${1:-$CTID}

    # If the --rebuild flag is set, then destroy the previous instance of the LXR
    (( REBUILD == 1 )) && [[ -f "/etc/pve/lxc/$ctid.conf" ]] && (
        msg_info "Remove the old container version"
        sudo pct destroy $ctid --force 1
        )

    # The following options come straight out of the 'pct create' man page
            
    msg_info "Creating the LXC Container"
    
    local net0=$(echo "name=eth0,bridge=${BRIDGE},ip=${NET}" \
                "${MACADDR:+,hwaddr=$MACADDR}" \
                "${GATEWAY:+,gw=$GATEWAY}" \
                "${VLAN:+,tag=$VLAN}" \
                "${MTU:+,mtu=$MTU}"  | sed 's/  *,/,/' )
            
    mps=""; let mpi=-1
    add_mp $ROOT_PATH/bin       /usr/local/sbin "ro=1,backup=0"
    add_mp $ROOT_PATH/conf      /usr/local/conf "ro=1,backup=0"
    add_mp $DATA_PATH/$ROOT_DIR /usr/local/data "backup=0"
echo $mps

    sudo pct create $ctid $(get_template ${OSTYPE}-${OSVERSION:-}) \
        --description "# ${OSTYPE} ${OSVERSION} ${APP} LXC" \
        --hostname $HOST \
        --arch $(dpkg --print-architecture) \
        --rootfs ${DISKSTORE}:${DISK} \
        --features $FEATURES \
        --onboot $ONBOOT \
        --cores $CORES \
        --memory $RAM \
        --unprivileged $PRIVTYPE \
        --ostype $OSTYPE \
        --net0 $net0 \
        ${mps} \
        ${DOMAIN:+--searchdomain $DOMAIN} \
        ${DNNS:+--nameserver $DNS} \
        ${PASSWORD:+--password "$PASSWORD"} \
        ${SSHKEYS:+--ssh-public-keys $SSHKEYS}

    unset mps mpi
    msg_ok "LXC Container $ctid was successfully created."
}

function start_LXC {
    local -i ctid=${1:-$CTID}
    msg_info "First start of the LXC Container"
    sudo pct start $CTID
}

function bootstrap_LXC {
    local -i ctid=${1:-$CTID}
    msg_info "Initial Provision of the LXC Container"
    
    # Alpine doesn't have bash installed by default, so install first so that .env,
    # configSettings and target-bootstrap.sh can always be executed using bash,
    # and set the root default login to bash.
    [[ $OSTYPE = "alpine" ]] &&
        sudo pct exec $ctid -- /bin/ash - <<< "
            /sbin/apk add --no-cache bash
            /bin/sed -i '/^root:/s!/ash!/bash!' /etc/passwd"
            
    ( cd $ROOT_PATH; cat $(readlink -f .env) configSettings target-bootstrap.sh ) |
        sudo pct exec $ctid -- /bin/bash -

    sudo pct reboot $ctid

    local IP=''
    while [[ -z $IP ]]; do
        sleep 1  # Allow container to initialise
        IP=$(sudo pct exec $ctid ip a s dev eth0 | awk '/inet /{sub(/\/.*/,""); print $2}')
    done
    msg_info "$APP Build for $HOST($ctid),IP=$IP completed successfully in ${SECONDS} sec"
    return 0
}

# =================================== Effective Main Entry =====================================

# Set up execution context

setupErrorHandling

groups | grep -q sudo || msg_error "Run from sudo account"

setRoot "$1";  shift
setOptionDefaults

# Load the container's .env and configSettings and do any Option overrides.  This
# will also establish any callback hooks specific to this container.

setEnvOptOverrides
setCommandLinevOptOverrides $*
fixupVariableDefaults

create_LXC    $CTID
map_UID       $CTID
start_LXC     $CTID
bootstrap_LXC $CTID

# vim: autoindent expandtab tabstop=4 shiftwidth=4